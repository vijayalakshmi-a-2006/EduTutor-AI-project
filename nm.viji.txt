# Import Libraries
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)

model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# Text generation function
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


# PDF text extraction
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""

    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""

        for page in pdf_reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"

        return text

    except Exception as e:
        return f"Error Reading PDF: {str(e)}"


# Subject explanation function
def explain_topic(subject, topic, difficulty_level):
    prompt = (
        f"As an educational tutor, explain the topic '{topic}' from {subject} "
        f"at a {difficulty_level} level. Provide a clear, comprehensive explanation "
        f"with examples and key concepts. Make it easy to understand and engaging."
    )
    return generate_response(prompt, max_length=1200)


# Homework help function
def homework_helper(question, subject, show_steps):
    if show_steps:
        prompt = (
            f"Help solve this {subject} problem step by step: {question}\n"
            f"Please provide detailed step-by-step solution with explanations for each step."
        )
    else:
        prompt = (
            f"Help solve this {subject} problem: {question}\n"
            f"Provide a clear and concise solution with explanation."
        )
    return generate_response(prompt, max_length=1000)


# Study material summarizer
def study_material_summarizer(pdf_file, text_input, summary_type):
    # Get text from PDF or direct input
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
    else:
        content = text_input
    
    if not content.strip():
        return "Please provide study material either by uploading a PDF or entering text."
    
    if summary_type == "Key Points":
        prompt = f"Extract and list the key points from this study material:\n\n{content}"
    elif summary_type == "Detailed Summary":
        prompt = f"Provide a detailed summary of this study material:\n\n{content}"
    else:  # Quick Overview
        prompt = f"Provide a quick overview of this study material:\n\n{content}"
    
    return generate_response(prompt, max_length=1200)


# Quiz generator
def generate_quiz(topic, subject, num_questions, difficulty):
    prompt = (
        f"Create {num_questions} {difficulty} level quiz questions about {topic} "
        f"in {subject}. Include multiple choice questions with 4 options each. "
        f"Format: Question, A) option, B) option, C) option, D) option, Answer: X"
    )
    return generate_response(prompt, max_length=1500)


# Create Gradio interface
with gr.Blocks(title="Edu Tutor AI", theme=gr.themes.Soft()) as app:
    gr.Markdown("# üéì Edu Tutor AI - Your Personal Learning Assistant")
    gr.Markdown("Get help with homework, explanations, study materials, and more!")

with gr.Tab("üìö Topic Explanation"):
        with gr.Row():
            with gr.Column():
                subject_dropdown = gr.Dropdown(
                    choices=["Mathematics", "Science", "Physics", "Chemistry", "Biology", 
                            "History", "Geography", "Literature", "Computer Science", "Other"],
                    label="Subject",
                    value="Mathematics"
                )
                topic_input = gr.Textbox(
                    label="Topic to Explain",
                    placeholder="e.g., Quadratic equations, Photosynthesis, World War II...",
                    lines=2
                )
                difficulty_level = gr.Radio(
                    choices=["Beginner", "Intermediate", "Advanced"],
                    label="Difficulty Level",
                    value="Intermediate"
                )
                explain_btn = gr.Button("Explain Topic", variant="primary")
            with gr.Column():
                explanation_output = gr.Textbox(
                    label="Topic Explanation",
                    lines=15,
                    show_copy_button=True
                )
        explain_btn.click(explain_topic, inputs=[subject_dropdown, topic_input, difficulty_level], outputs=explanation_output)

    with gr.Tab("‚úèÔ∏è Homework Helper"):
        with gr.Row():
            with gr.Column():
                hw_question = gr.Textbox(
                    label="Your Question/Problem",
                    placeholder="Enter your homework question here...",
                    lines=4
                )
                hw_subject = gr.Dropdown(
                    choices=["Mathematics", "Science", "Physics", "Chemistry", "Biology", 
                            "History", "Geography", "Literature", "Computer Science", "Other"],
                    label="Subject",
                    value="Mathematics"
                )
                show_steps = gr.Checkbox(
                    label="Show step-by-step solution",
                    value=True
                )
                solve_btn = gr.Button("Get Help", variant="primary")
            with gr.Column():
                solution_output = gr.Textbox(
                    label="Solution & Explanation",
                    lines=15,
                    show_copy_button=True
                )
        solve_btn.click(homework_helper, inputs=[hw_question, hw_subject, show_steps], outputs=solution_output)

    with gr.Tab("üìÑ Study Material Summarizer"):
        with gr.Row():
            with gr.Column():
                study_pdf = gr.File(
                    label="Upload Study Material (PDF)",
                    file_types=[".pdf"]
                )
                study_text = gr.Textbox(
                    label="Or paste study material text here",
                    placeholder="Paste your study material here...",
                    lines=6
                )
                summary_type = gr.Radio(
                    choices=["Quick Overview", "Key Points", "Detailed Summary"],
                    label="Summary Type",
                    value="Key Points"
                )
                summarize_btn = gr.Button("Summarize", variant="primary")
            with gr.Column():
                study_summary = gr.Textbox(
                    label="Study Material Summary",
                    lines=18,
                    show_copy_button=True
                )
        summarize_btn.click(study_material_summarizer, inputs=[study_pdf, study_text, summary_type], outputs=study_summary)

    with gr.Tab("üß† Quiz Generator"):
        with gr.Row():
            with gr.Column():
                quiz_topic = gr.Textbox(
                    label="Quiz Topic",
                    placeholder="e.g., Algebra, Cell Biology, American History...",

lines=2
                )
                quiz_subject = gr.Dropdown(
                    choices=["Mathematics", "Science", "Physics", "Chemistry", "Biology", 
                            "History", "Geography", "Literature", "Computer Science", "Other"],
                    label="Subject",
                    value="Mathematics"
                )
                num_questions = gr.Slider(
                    minimum=3,
                    maximum=10,
                    step=1,
                    value=5,
                    label="Number of Questions"
                )
                quiz_difficulty = gr.Radio(
                    choices=["Easy", "Medium", "Hard"],
                    label="Difficulty Level",
                    value="Medium"
                )
                generate_quiz_btn = gr.Button("Generate Quiz", variant="primary")
            with gr.Column():
                quiz_output = gr.Textbox(
                    label="Generated Quiz",
                    lines=20,
                    show_copy_button=True
                )
        generate_quiz_btn.click(generate_quiz, inputs=[quiz_topic, quiz_subject, num_questions, quiz_difficulty], outputs=quiz_output)

    gr.Markdown("---")
    gr.Markdown("üí° Tip: For best results, be specific about your topic or question. The AI tutor is here to help you learn!")

# Launch app
app.launch(share = True)